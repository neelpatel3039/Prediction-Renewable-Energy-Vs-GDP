transactions_data %>% select(Transaction_ID, Quantity, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + # draw the linear method
labs(title = "Total Amount vs. Electronics Qty", x = "Quantity", y = "Total Amount")
transactions_electronics <- transactions_data %>% select(Transaction_ID, Quantity, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
#Create the scatter plot
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + # draw the linear method
labs(title = "Total Amount vs. Electronics Qty", x = "Quantity", y = "Total Amount")
transactions_electronics <- transactions_data %>%
select(Transaction_ID, Quantity, Product_ID, Total_Amount) %>%
right_join(products_data, by = "Product_ID") %>%
filter(Category == "Electronics")
transactions_data %>%
select(Transaction_ID, Quantity, Total_Amount, Product_ID)
transactions_data %>%
select(Transaction_ID, Quantity, Total_Amount, Product_ID) %>%
right_join(products_data, by = "Product_ID")
transactions_data %>%
select(Transaction_ID, Quantity, Total_Amount, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>%
filter(Category == "Electronics")
transactions_electronics <- transactions_data %>%
select(Transaction_ID, Quantity, Total_Amount, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>%
filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + # draw the linear method
labs(title = "Total Amount vs. Electronics Qty", x = "Quantity", y = "Total Amount")
View(transactions_electronics)
View(transactions_data)
transactions_electronics <- transactions_data %>%
select(Transaction_ID, Quantity, Total_Amount, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>%
filter(Category == "Electronics")
#Create the scatter plot
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + # draw the linear method
labs(title = "Total Amount vs. Electronics Qty", x = "Quantity", y = "Total Amount")
View(Num_of_Transactions)
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount")
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Categories") + ylab("No. of Transactions") + ggtitle("Transaction Counts by Product Categories")
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location, Customer_ID) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Creating new tibble, grouping and summarizing to find No. of Transactions each month by each customer (used in below processing)
Num_of_Transactions <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n())
# Filtering frequent customers based on transaction count condition in all months
frequent_customers_all <- Num_of_Transactions %>% group_by(Customer_ID) %>% filter(all(Number_of_Transactions >= 3)) %>%
summarise(Number_of_Months_Transacted = n()) %>% filter(Number_of_Months_Transacted == 12) %>% distinct(Customer_ID)
# Plotting Total Amount against Electronics Quantity
transactions_electronics <- transactions_data %>% select(Transaction_ID, Total_Amount, Quantity, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount") +
subtitle = "Quantity Sold vs. Total Sales Amount by Store Location"
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount") +
subtitle = "Quantity Sold vs. Total Sales Amount by Store Location"
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount by Store Location")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location, Customer_ID) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
View(frequent_customers_any)
frequent_customers_any
left_join(customers_data, frequent_customers_any, by = Customer_ID)
View(customers_data)
frequent_customers_any %>% left_join(customers_data, by = Customer_ID)
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
left_join(customers_data, frequent_customers_any, by = Customer_ID)
left_join(customers_data, frequent_customers_any, by = join_by(Customer_ID))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
frequent_customers_any_details
View(frequent_customers_any_details)
# Creating new tibble, grouping and summarizing to find No. of Transactions each month by each customer (used in below processing)
Num_of_Transactions <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n())
# Filtering frequent customers based on transaction count condition in all months
frequent_customers_all <- Num_of_Transactions %>% group_by(Customer_ID) %>% filter(all(Number_of_Transactions >= 3)) %>%
summarise(Number_of_Months_Transacted = n()) %>% filter(Number_of_Months_Transacted == 12) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_all_details <-  left_join(frequent_customers_all, customers_data, by = join_by(Customer_ID))
frequent_customers_all
frequent_customers_all_details
# Plotting Total Amount against Electronics Quantity
transactions_electronics <- transactions_data %>% select(Transaction_ID, Total_Amount, Quantity, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
# Assignment 1 for BUSI 5100
#
#
#
# Full Name: Neel Ashwin Patel
# Student ID: 100985884
# Email Address: neelashwin.patel@ontariotechu.net
#
#
#
#Load all required libraries here:----
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Question 1 answer:----
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Question 2 answer:----
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Question 3 answer:----
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Question 4 answer:----
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Question 5 answer:----
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Question 6 answer:----
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Question 7 answer:----
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location, Customer_ID) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
frequent_customers_any_details
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
frequent_customers_any_details
unique(customers_data$Location)
location_summary
View(customers_data)
View(transactions_data)
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount, na.rm = TRUE))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
# Creating new tibble, grouping and summarizing to find No. of Transactions each month by each customer (used in below processing)
Num_of_Transactions <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n())
# Filtering frequent customers based on transaction count condition in all months
frequent_customers_all <- Num_of_Transactions %>% group_by(Customer_ID) %>% filter(all(Number_of_Transactions >= 3)) %>%
summarise(Number_of_Months_Transacted = n()) %>% filter(Number_of_Months_Transacted == 12) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_all_details <-  left_join(frequent_customers_all, customers_data, by = join_by(Customer_ID))
# Plotting Total Amount against Electronics Quantity
transactions_electronics <- transactions_data %>% select(Transaction_ID, Total_Amount, Quantity, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
# Assignment 1 for BUSI 5100
#
#
#
# Full Name: Neel Ashwin Patel
# Student ID: 100985884
# Email Address: neelashwin.patel@ontariotechu.net
#
#
#
#Load all required libraries here:----
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Question 1 answer:----
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Question 2 answer:----
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Question 3 answer:----
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Question 4 answer:----
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount, na.rm = TRUE))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Question 5 answer:----
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
View(transactions_data)
# Summarising transactions by Location
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
sum(location_summary$Number_of_Transactions)
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
frequent_customers_any
frequent_customers_any_details
# Summarising transactions by Location
location_summary = right_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
sum(location_summary$Number_of_Transactions)
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
transactions_electronics
setwd("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Project/Prediction-Renewable-Energy-Vs-GDP/Code/Random Forest")
# Load necessary libraries
library(dplyr)
library(readr)
library(writexl)
library(tidyr)
library(randomForest)
library(ggplot2)
library(rpart)
library(rpart.plot)
# Load the dataset
data <- read.csv("master_data_with_gdp_india.csv")
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
train_indices <- sample(seq_len(nrow(data)), size = 0.8 * nrow(data))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
# Define a range of mtry values to test
mtry_values <- seq(1, ncol(train_data) - 1, by = 1)
# Store the OOB error rates for each mtry value
oob_errors <- data.frame(
mtry = integer(),
OOBError = numeric()
)
# Loop over different mtry values
for (mtry in mtry_values) {
# Train the Random Forest model
set.seed(123)
rf_model <- randomForest(GDP ~ ., data = train_data, ntree = 500, mtry = mtry, importance = TRUE)
# Store the mtry value and corresponding OOB error
oob_errors <- rbind(oob_errors, data.frame(mtry = mtry, OOBError = tail(rf_model$mse, 1)))
}
# Plot the OOB error rate for different mtry values
oob_error_plot <- ggplot(oob_errors, aes(x = mtry, y = OOBError)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "OOB Error Rate vs. Number of Variables Tried at Each Split (mtry)",
x = "Number of Variables (mtry)",
y = "OOB Error Rate (MSE)") +
theme_minimal()
# Load necessary libraries
library(dplyr)
# Load necessary libraries
library(dplyr)
library(readr)
library(writexl)
library(tidyr)
library(randomForest)
library(ggplot2)
library(rpart)
library(rpart.plot)
# Load the dataset
data <- read.csv("master_data_with_gdp_brazil.csv")
head(data)
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
data <- data[, -c(1, 2)]
head(data)
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
train_indices <- sample(seq_len(nrow(data)), size = 0.8 * nrow(data))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
# Define a range of mtry values to test
mtry_values <- seq(1, ncol(train_data) - 1, by = 1)
# Store the OOB error rates for each mtry value
oob_errors <- data.frame(
mtry = integer(),
OOBError = numeric()
)
# Loop over different mtry values
for (mtry in mtry_values) {
# Train the Random Forest model
set.seed(123)
rf_model <- randomForest(GDP ~ ., data = train_data, ntree = 500, mtry = mtry, importance = TRUE)
# Store the mtry value and corresponding OOB error
oob_errors <- rbind(oob_errors, data.frame(mtry = mtry, OOBError = tail(rf_model$mse, 1)))
}
# Load the dataset
data <- read.csv("master_data_with_gdp_brazil.csv")
data <- data[, -c(1, 2)]
head(data)
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
train_indices <- sample(seq_len(nrow(data)), size = 0.8 * nrow(data))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
# Define a range of mtry values to test
mtry_values <- seq(1, ncol(train_data) - 1, by = 1)
# Store the OOB error rates for each mtry value
oob_errors <- data.frame(
mtry = integer(),
OOBError = numeric()
)
# Load necessary libraries
library(dplyr)
library(readr)
# Load necessary libraries
library(dplyr)
library(readr)
library(writexl)
library(tidyr)
library(randomForest)
library(ggplot2)
library(rpart)
library(rpart.plot)
# Load the dataset
data <- read.csv("master_data_with_gdp_brazil.csv")
head(data)
# Load the dataset
data <- read.csv("master_data_with_gdp_india.csv")
# Load the dataset
data <- read.csv("master_data_with_gdp_brazil.csv")
head(data)
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
train_indices <- sample(seq_len(nrow(data)), size = 0.8 * nrow(data))
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
# Define a range of mtry values to test
mtry_values <- seq(1, ncol(train_data) - 1, by = 1)
# Store the OOB error rates for each mtry value
oob_errors <- data.frame(
mtry = integer(),
OOBError = numeric()
)
# Loop over different mtry values
for (mtry in mtry_values) {
# Train the Random Forest model
set.seed(123)
rf_model <- randomForest(GDP ~ ., data = train_data, ntree = 500, mtry = mtry, importance = TRUE)
# Store the mtry value and corresponding OOB error
oob_errors <- rbind(oob_errors, data.frame(mtry = mtry, OOBError = tail(rf_model$mse, 1)))
}
# Plot the OOB error rate for different mtry values
oob_error_plot <- ggplot(oob_errors, aes(x = mtry, y = OOBError)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "OOB Error Rate vs. Number of Variables Tried at Each Split (mtry)",
x = "Number of Variables (mtry)",
y = "OOB Error Rate (MSE)") +
theme_minimal()
# Display the plot
print(oob_error_plot)
# Print all the OOB values
print(oob_errors)
# Identify the mtry value with the lowest OOB error rate
best_mtry <- oob_errors$mtry[which.min(oob_errors$OOBError)]
cat("Best mtry value:", best_mtry, "\n")
# Train the Random Forest model with the best mtry value
set.seed(123)
best_rf_model <- randomForest(GDP ~ ., data = train_data, ntree = 500, mtry = best_mtry, importance = TRUE)
# Make predictions on the test data
test_predictions <- predict(best_rf_model, test_data)
# Create a data frame with actual and predicted values
results <- data.frame(
Actual = test_data$GDP,
Predicted = test_predictions
)
# Plot the actual values vs. predicted values
actual_vs_predicted_plot <- ggplot(results, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.6) +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
labs(title = "Actual vs. Predicted Values",
x = "Actual GDP",
y = "Predicted GDP") +
theme_minimal()
# Display the plot
print(actual_vs_predicted_plot)
# Train a single decision tree using rpart
decision_tree <- rpart(GDP ~ ., data = train_data)
# Plot the decision tree
rpart.plot(decision_tree, main = "Decision Tree for GDP Prediction", type = 3, extra = 1)
