# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Categories") + ylab("No. of Transactions") + ggtitle("Transaction Counts by Product Categories")
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location, Customer_ID) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Creating new tibble, grouping and summarizing to find No. of Transactions each month by each customer (used in below processing)
Num_of_Transactions <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n())
# Filtering frequent customers based on transaction count condition in all months
frequent_customers_all <- Num_of_Transactions %>% group_by(Customer_ID) %>% filter(all(Number_of_Transactions >= 3)) %>%
summarise(Number_of_Months_Transacted = n()) %>% filter(Number_of_Months_Transacted == 12) %>% distinct(Customer_ID)
# Plotting Total Amount against Electronics Quantity
transactions_electronics <- transactions_data %>% select(Transaction_ID, Total_Amount, Quantity, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount") +
subtitle = "Quantity Sold vs. Total Sales Amount by Store Location"
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount") +
subtitle = "Quantity Sold vs. Total Sales Amount by Store Location"
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount by Store Location")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location, Customer_ID) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
View(frequent_customers_any)
frequent_customers_any
left_join(customers_data, frequent_customers_any, by = Customer_ID)
View(customers_data)
frequent_customers_any %>% left_join(customers_data, by = Customer_ID)
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
left_join(customers_data, frequent_customers_any, by = Customer_ID)
left_join(customers_data, frequent_customers_any, by = join_by(Customer_ID))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
frequent_customers_any_details
View(frequent_customers_any_details)
# Creating new tibble, grouping and summarizing to find No. of Transactions each month by each customer (used in below processing)
Num_of_Transactions <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n())
# Filtering frequent customers based on transaction count condition in all months
frequent_customers_all <- Num_of_Transactions %>% group_by(Customer_ID) %>% filter(all(Number_of_Transactions >= 3)) %>%
summarise(Number_of_Months_Transacted = n()) %>% filter(Number_of_Months_Transacted == 12) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_all_details <-  left_join(frequent_customers_all, customers_data, by = join_by(Customer_ID))
frequent_customers_all
frequent_customers_all_details
# Plotting Total Amount against Electronics Quantity
transactions_electronics <- transactions_data %>% select(Transaction_ID, Total_Amount, Quantity, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
# Assignment 1 for BUSI 5100
#
#
#
# Full Name: Neel Ashwin Patel
# Student ID: 100985884
# Email Address: neelashwin.patel@ontariotechu.net
#
#
#
#Load all required libraries here:----
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Question 1 answer:----
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Question 2 answer:----
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Question 3 answer:----
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Question 4 answer:----
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Question 5 answer:----
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Question 6 answer:----
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Question 7 answer:----
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location, Customer_ID) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
# Summarising transactions by Location and Customer_ID
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
frequent_customers_any_details
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
frequent_customers_any_details
unique(customers_data$Location)
location_summary
View(customers_data)
View(transactions_data)
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount, na.rm = TRUE))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
# Creating a bar graph of transaction counts by product categories
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
# Summarising transactions by Location
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_any_details <-  left_join(frequent_customers_any, customers_data, by = join_by(Customer_ID))
# Creating new tibble, grouping and summarizing to find No. of Transactions each month by each customer (used in below processing)
Num_of_Transactions <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n())
# Filtering frequent customers based on transaction count condition in all months
frequent_customers_all <- Num_of_Transactions %>% group_by(Customer_ID) %>% filter(all(Number_of_Transactions >= 3)) %>%
summarise(Number_of_Months_Transacted = n()) %>% filter(Number_of_Months_Transacted == 12) %>% distinct(Customer_ID)
# Adding more columns to above tibble for more info
frequent_customers_all_details <-  left_join(frequent_customers_all, customers_data, by = join_by(Customer_ID))
# Plotting Total Amount against Electronics Quantity
transactions_electronics <- transactions_data %>% select(Transaction_ID, Total_Amount, Quantity, Store_Location, Product_ID) %>%
right_join(products_data, by = "Product_ID") %>% filter(Category == "Electronics")
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
# Assignment 1 for BUSI 5100
#
#
#
# Full Name: Neel Ashwin Patel
# Student ID: 100985884
# Email Address: neelashwin.patel@ontariotechu.net
#
#
#
#Load all required libraries here:----
libraries <- c("tibble", "tidyverse", "readr", "dplyr", "ggplot2")
lapply(libraries, library, character.only = TRUE)
# Question 1 answer:----
# Reading in the datasets
folder_path = c("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Assignment 1/")
customers_data <- read_csv(paste0(folder_path, "customers_data.csv"))
products_data <- read_csv(paste0(folder_path, "products_data.csv"))
transactions_data <- read_csv(paste0(folder_path, "transactions_data.csv"))
# Question 2 answer:----
# Getting a glimpse of each dataset
glimpse(customers_data)
glimpse(products_data)
glimpse(transactions_data)
# Question 3 answer:----
# Filtering transactions data for the year 2023
transactions_2023 <- transactions_data %>% filter(Year == 2023)
# Displaying the first 10 rows of the filtered data
head(transactions_2023, 10)
# Question 4 answer:----
# Grouping transactions by Customer_ID and summarising the total number of transactions and total amount spent
customer_summary <- transactions_data %>% group_by(Customer_ID) %>%
summarise(total_no_of_transactions = n(), total_amount_spent = sum(Total_Amount, na.rm = TRUE))
# Display the top 10 rows of the summary
head(customer_summary, 10)
# Question 5 answer:----
# Filtering premium customers with total amount spent >= 10000 and Selecting specific columns and merging with customers data
premium_customers <- customer_summary %>% filter(total_amount_spent >= 10000) %>%
select(Customer_ID, "Total Transaction" = total_amount_spent) %>% left_join(customers_data, by = "Customer_ID")
bar_graph_1 = transactions_data %>% select(Transaction_ID, Total_Amount, Product_ID) %>% right_join(products_data, by = "Product_ID") %>% select(Transaction_ID, Total_Amount, Product_ID, Category) %>% group_by(Category) %>% summarise(Total_Transaction_Count = n())
ggplot(bar_graph_1, aes(x = Category, y = Total_Transaction_Count)) + geom_bar(stat = "identity") + xlab("Product Category") + ylab("Number of Transaction") + ggtitle("Transactions by Product Category")
# Adding a column for Discounted_Amount with the condition (mentioned in the assignment)
transactions_data <- transactions_data %>% mutate(Discounted_Amount = if_else(Total_Amount > 100, Total_Amount * 0.9, Total_Amount))
View(transactions_data)
# Summarising transactions by Location
location_summary = full_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
sum(location_summary$Number_of_Transactions)
# Filtering frequent customers based on transaction count condition in any month
frequent_customers_any <- transactions_2023 %>% group_by(Customer_ID, Month) %>% summarise(Number_of_Transactions = n()) %>% arrange(Customer_ID, Month, Number_of_Transactions) %>% filter(any(Number_of_Transactions >= 3)) %>% distinct(Customer_ID)
frequent_customers_any
frequent_customers_any_details
# Summarising transactions by Location
location_summary = right_join(customers_data, transactions_data, by = join_by(Customer_ID)) %>% group_by(Location) %>% summarise(Number_of_Transactions = n(), Total_Amount_Spent = sum(Total_Amount, na.rm = TRUE)) %>% arrange(desc(Number_of_Transactions))
location_summary
sum(location_summary$Number_of_Transactions)
ggplot(transactions_electronics, aes(x = Quantity, y = Total_Amount, color = Store_Location)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
labs(title = "Electronics Sales", x = "Quantity Sold", y = "Total Sales Amount", subtitle = "Quantity Sold vs. Total Sales Amount - Color Coded by Store Location")
transactions_electronics
data_top_10_economics <- data %>%
filter(Entity %in% c("United States","China","Germany","Japan","India","United Kingdom","France","Brazil","Italy"))
data_top_10_economics <- data %>%
filter(Entity in c("United States","China","Germany","Japan","India","United Kingdom","France","Brazil","Italy"))
# Load necessary libraries
library(dplyr)
library(caret)
library(ggplot2)  # For visualization
# Load your data
data <- read.csv("master_data_with_gdp.csv")  # Replace with your actual file
setwd("C:/School/3 - Master of Science in Business Analytics and AI/1 - Fall Term (Semester 1)/1 - MBAI 5100 - Mondays - Business Analytics/Project/Prediction-Renewable-Energy-Vs-GDP/Code")
# Load your data
data <- read.csv("master_data_with_gdp.csv")  # Replace with your actual file
data_top_10_economics <- data %>%
filter(Entity in c("United States","China","Germany","Japan","India","United Kingdom","France","Brazil","Italy"))
data_top_10_economics <- data %>%
filter(Entity %in% c("United States","China","Germany","Japan","India","United Kingdom","France","Brazil","Italy"))
# Function to select the top 3 most important variables using RFE and train/test linear regression for each country
train_test_model <- function(country_data, country_name) {
set.seed(123)  # Set seed for reproducibility
# Define the proportion for the training set
train_proportion <- 0.8
# Calculate the number of observations for the training set
train_size <- floor(train_proportion * nrow(country_data))
# Select the training indexes sequentially
train_index <- 1:train_size
# Split the data into training and testing sets using the sequential indexes
train_data <- country_data[train_index, ]
test_data <- country_data[-train_index, ]
# Convert necessary columns to factors
train_data <- train_data %>% mutate_if(is.character, as.factor)
test_data <- test_data %>% mutate_if(is.character, as.factor)
# Remove variables with only one level
train_data <- train_data %>% select_if(~ nlevels(as.factor(.)) > 1)
test_data <- test_data %>% select_if(~ nlevels(as.factor(.)) > 1)
# Define the control using RFE
control <- rfeControl(functions = lmFuncs, method = "cv", number = 10)
# Run the RFE algorithm to select the top 3 variables
rfe_result <- rfe(
train_data %>% select(-GDP, -Year),
train_data$GDP,
sizes = 3,
rfeControl = control
)
# Get the top 3 selected variables
selected_vars <- predictors(rfe_result)
# Print the selected variables
cat("Selected variables for", country_name, ":", selected_vars, "\n")
# Create a formula for the linear regression model using the selected variables
formula <- as.formula(paste("GDP ~", paste(selected_vars, collapse = " + ")))
# Train the linear regression model
model <- lm(formula, data = train_data)
# Predict on the test set
predictions <- predict(model, newdata = test_data)
# Calculate performance metrics
actual <- test_data$GDP
mse <- mean((predictions - actual) ^ 2)
rmse <- sqrt(mse)
r_squared <- summary(model)$r.squared
# Create a dataframe for visualization
vis_data <- data.frame(
Year = test_data$Year,
Actual = actual,
Predicted = predictions
)
# Plot the actual vs. predicted values
plot <- ggplot(vis_data, aes(x = Year)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Predicted, color = "Predicted")) +
labs(title = paste("Actual vs Predicted GDP for", country_name),
x = "Year",
y = "GDP") +
theme_minimal()
# Return model, performance metrics, and plot
list(
model = model,
predictions = predictions,
actual = actual,
mse = mse,
rmse = rmse,
r_squared = r_squared,
plot = plot
)
}
# Get a list of countries
countries <- unique(data$Entity)
# Get a list of countries
countries <- unique(data_top_10_economics$Entity)
# Initialize a list to store results
results <- list()
# Loop through each country and train/test the model
for (country in countries) {
cat("Processing country:", country, "\n")
country_data <- data %>% filter(Entity == country)
# Train and test the model
result <- train_test_model(country_data, country)
# Store the results
results[[country]] <- result
# Print the plot for visual inspection
print(result$plot)
}
# Load necessary libraries
library(dplyr)
library(caret)
library(ggplot2)  # For visualization
# Load your data
data <- read.csv("master_data_with_gdp.csv")  # Replace with your actual file
data_top_10_economics <- data %>%
filter(Entity %in% c("United States","China","Germany","Japan","India","United Kingdom","France","Brazil","Italy"))
# Function to select the top 3 most important variables using RFE and train/test linear regression for each country
train_test_model <- function(country_data, country_name) {
set.seed(123)  # Set seed for reproducibility
# Define the proportion for the training set
train_proportion <- 0.8
# Calculate the number of observations for the training set
train_size <- floor(train_proportion * nrow(country_data))
# Select the training indexes sequentially
train_index <- 1:train_size
# Split the data into training and testing sets using the sequential indexes
train_data <- country_data[train_index, ]
test_data <- country_data[-train_index, ]
# Convert necessary columns to factors
train_data <- train_data %>% mutate_if(is.character, as.factor)
test_data <- test_data %>% mutate_if(is.character, as.factor)
# Remove variables with only one level
train_data <- train_data %>% select_if(~ nlevels(as.factor(.)) > 1)
test_data <- test_data %>% select_if(~ nlevels(as.factor(.)) > 1)
# Define the control using RFE
control <- rfeControl(functions = lmFuncs, method = "cv", number = 10)
# Run the RFE algorithm to select the top 3 variables
rfe_result <- rfe(
train_data %>% select(-GDP, -Year),
train_data$GDP,
sizes = 3,
rfeControl = control
)
# Get the top 3 selected variables
selected_vars <- predictors(rfe_result)
# Print the selected variables
cat("Selected variables for", country_name, ":", selected_vars, "\n")
# Create a formula for the linear regression model using the selected variables
formula <- as.formula(paste("GDP ~", paste(selected_vars, collapse = " + ")))
# Train the linear regression model
model <- lm(formula, data = train_data)
# Predict on the test set
predictions <- predict(model, newdata = test_data)
# Calculate performance metrics
actual <- test_data$GDP
mse <- mean((predictions - actual) ^ 2)
rmse <- sqrt(mse)
r_squared <- summary(model)$r.squared
# Create a dataframe for visualization
vis_data <- data.frame(
Year = test_data$Year,
Actual = actual,
Predicted = predictions
)
# Plot the actual vs. predicted values
plot <- ggplot(vis_data, aes(x = Year)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Predicted, color = "Predicted")) +
labs(title = paste("Actual vs Predicted GDP for", country_name),
x = "Year",
y = "GDP") +
theme_minimal()
# Return model, performance metrics, and plot
list(
model = model,
predictions = predictions,
actual = actual,
mse = mse,
rmse = rmse,
r_squared = r_squared,
plot = plot
)
}
# Get a list of countries
countries <- unique(data_top_10_economics$Entity)
# Initialize a list to store results
results <- list()
# Loop through each country and train/test the model
for (country in countries) {
cat("Processing country:", country, "\n")
country_data <- data %>% filter(Entity == country)
# Train and test the model
result <- train_test_model(country_data, country)
# Store the results
results[[country]] <- result
# Print the plot for visual inspection
print(result$plot)
}
# Display the results
results
# Load necessary libraries
library(dplyr)
library(corrplot)
# Load your data
data <- read.csv("master_data_with_gdp.csv")  # Replace with your actual file
# Select relevant columns for correlation
correlation_data <- data %>% select(Wind_Elec_TWh, Hydro_Elec_TWh, Solar_Elec_TWh,
Other_Renew_Elec_TWh, Other_Renew_Gen_TWh, Solar_Gen_TWh,
Wind_Gen_TWh, Hydro_Gen_TWh, Renew_Elec_Pct, Renew_Energy_Pct,
Hydro_Energy_Pct, Solar_Energy_Pct, Wind_Energy_Pct,
Hydro_Elec_Pct, Solar_Elec_Pct, Wind_Elec_Pct,
Prim_Energy_Cons_TWh, Prim_Energy_Cons_Capita,
Annual_Change_Cons_Pct, Elec_Gen_TWh, Elec_Capita_kWh)
# Calculate correlation matrix
cor_matrix <- cor(correlation_data, use = "complete.obs")
# Create a beautiful correlation plot
corrplot(cor_matrix, method = "color", type = "upper",
addCoef.col = "black", # Add correlation coefficients
tl.col = "black", tl.srt = 45, # Text label color and rotation
col = colorRampPalette(c("red", "white", "blue"))(200), # Color palette
title = "Multicollinearity Matrix for Renewable Energy and GDP Variables",
mar = c(0, 0, 1, 0)) # Margins
# Load necessary libraries
library(dplyr)
library(corrplot)
# Load your data
data <- read.csv("master_data_with_gdp.csv")  # Replace with your actual file
# Select relevant columns for correlation
correlation_data <- data %>% select(Wind_Elec_TWh, Hydro_Elec_TWh, Solar_Elec_TWh,
Other_Renew_Elec_TWh, Other_Renew_Gen_TWh, Solar_Gen_TWh,
Wind_Gen_TWh, Hydro_Gen_TWh, Renew_Elec_Pct, Renew_Energy_Pct,
Hydro_Energy_Pct, Solar_Energy_Pct, Wind_Energy_Pct,
Hydro_Elec_Pct, Solar_Elec_Pct, Wind_Elec_Pct,
Prim_Energy_Cons_TWh, Prim_Energy_Cons_Capita,
Annual_Change_Cons_Pct, Elec_Gen_TWh, Elec_Capita_kWh)
# Calculate correlation matrix
cor_matrix <- cor(correlation_data, use = "complete.obs")
# Create a beautiful correlation plot
corrplot(cor_matrix, method = "color", type = "upper",
addCoef.col = "black",  # Add correlation coefficients
tl.col = "black", tl.srt = 45,  # Text label color and rotation
col = colorRampPalette(c("red", "white", "blue"))(200),  # Color palette
title = "Multicollinearity Matrix for Renewable Energy and GDP Variables",
mar = c(0, 0, 1, 0),  # Margins
number.cex = 0.7)  # Adjust text size for coefficients
